#!/usr/bin/env zsh
emulate -L zsh
setopt extendedglob nullglob

local head dir show actual actual_init show_init remainder
show=${(%):-'%~'}
actual=${(%):-'%/'}
actual_init=${actual%${show#*/}}
show_init=${show%%/*}
remainder=${actual#$actual_init}

local glob
local -a dir_parts parts
for dir ("${actual_init%/}" ${(s:/:)remainder}); do
	# {{{ handle root case
	if [[ -z $dir ]]; then
		if zstyle -t :dir_glob include-root; then
			dir=/
		else
			head=/
		fi
	fi
	# }}}

	parts=()
	glob=
	# {{{ check cache and match glob
	if [[ -z ${glob::=$__prompt_dir_glob__cache[$head$dir]} ]]; then

		for glob ("${(@)prompt_dir_glob__globs}"); do
			local f=("$head$dir/"$~glob)
			[[ -n $f ]] && break
			# fallback value is an invalid glob (to prevent clobbering with user globs)
			glob='(#fallback)'
		done

		# write to cache array
		__prompt_dir_glob__cache[$head$dir]=$glob

		# schedule cache writeout
		if [[ ! ${(M)zsh_scheduled_events:#*prompt_dir_glob::flush_cache} ]]; then
			sched +15 prompt_dir_glob::flush_cache
		fi
	fi
	# }}}

	# get prefix style
	parts+=(${prompt_dir_glob__prefix[(e)$glob]:="%F{$POWERLEVEL9K_DIR_FOREGROUND}"})

	# {{{ truncate dir
	# don't truncate show_init
	local dir_truncated=''
	if
		[[ -z $show_init && $prompt_dir_glob__truncate[(e)$glob] ]] &&
			# this directory should be truncated unless it is '.'
		{ [[ ${head:a}/$dir != $actual ]] || zstyle -t :dir-glob truncate-pwd false } &&
			# this directory should be truncated, try cache first
		[[ -z ${dir_truncated::=$__prompt_dir_glob__truncate_cache[$head$dir]} ]]
	then
		local w=
		case $prompt_dir_glob__truncate[(e)$glob] in
		m*) # min:NUM (unique, but always show NUM digits)
			w=${${(M)prompt_dir_glob__truncate[(e)$glob]%%[[:digit:]]*}:-1}
			((w = w < 3 ? 0 : w - 2 ))
			dir_truncated=${dir[0,w]}
		;&  # fall-through
		u*) # unique
			set +f
			for c (${(s::)${dir:$w}}); do
				dir_truncated+=$c
				local f=("$head$dir_truncated"*(Y2))
				if (( $#f < 2 )); then
					if (($#dir - $#dir_truncated < 2)); then
						dir_truncated=$dir
					else
						dir_truncated+=$PROMPT_DIR_GLOB__TRUNCATE_CONT
					fi
					break
				fi
			done
			set -f
		;;
		c*) # char:NUM
			w=${${(M)prompt_dir_glob__truncate[(e)$glob]%%[[:digit:]]*}:-1}
			if (( w == 0 )); then
				dir_truncated='%{%}' # print nothing
			elif (( w < $#dir )); then
				dir_truncated=${dir[0,w-1]}$PROMPT_DIR_GLOB__TRUNCATE_CONT
			fi
		esac

		# write to cache array
		__prompt_dir_glob__truncate_cache[$head$dir]=$dir_truncated

		# schedule cache writeout
		if [[ ! ${(M)zsh_scheduled_events:#*prompt_dir_glob::flush_cache} ]]; then
			sched +15 prompt_dir_glob::flush_cache
		fi
	fi
	# }}}
	parts+=(${show_init:-${dir_truncated:-$dir}})

	# get suffix style
	parts+=(${prompt_dir_glob__suffix[(e)$glob]})

	# add to parts and cache
	dir_parts+=("${(j::)parts}")

	unset show_init
	# reset foreground style
	dir_parts+=("$PROMPT_DIR_GLOB__SEPARATOR%b%f%u")
	head+=${dir}/
done

# don't append final separator
REPLY=${(j::)dir_parts[1,-2]}
# vim: foldmethod=marker
